// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TodoList.Client.Components.Modals
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using TodoList.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using TodoList.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using TodoList.Client.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using TodoList.Client.Components.Modals;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\_Imports.razor"
using TodoList.Client.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\Components\Modals\TodoDetailsModal.razor"
using TodoList.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\Components\Modals\TodoDetailsModal.razor"
using TodoList.Shared.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\Components\Modals\TodoDetailsModal.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\Components\Modals\TodoDetailsModal.razor"
using TodoList.Shared.Enums;

#line default
#line hidden
#nullable disable
    public partial class TodoDetailsModal : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 93 "C:\Users\Sagg\Desktop\TodoList-master\TodoList\Client\Components\Modals\TodoDetailsModal.razor"
       

    private TodoForUpdateDto TodoForUpdate { get; } = new();
    private TodoDto _loadedTodo;

    [Inject]
    private ITodosService TodosService { get; set; }

    [Inject]
    private AppStateContainer AppState { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Parameter]
    public EventCallback OnTodoUpdated { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private bool _deleteFailed = false;
    private bool _updateFailed = false;
    private bool _updateConflict = false;

    public void Open(TodoDto todo)
    {
        _loadedTodo = todo;

        TodoForUpdate.Title = todo.Title;
        TodoForUpdate.Description = todo.Description;
        TodoForUpdate.IsDone = todo.IsDone;
        TodoForUpdate.Color = todo.Color;

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        _updateFailed = false;
        _deleteFailed = false;
        _updateConflict = false;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task SaveChangesAsync()
    {
        var response = await TodosService.UpdateTodo(_loadedTodo.ListOfTodosId, _loadedTodo.Id, TodoForUpdate);

        if (response.IsSuccessStatusCode)
        {
            _updateFailed = false;

            //todo for AppState update
            var todo = new TodoDto()
            {
                Id = _loadedTodo.Id,
                ListOfTodosId = _loadedTodo.ListOfTodosId,
                Title = TodoForUpdate.Title,
                Description = TodoForUpdate.Description,
                IsDone = TodoForUpdate.IsDone,
                Color = TodoForUpdate.Color,
                DateAdded = _loadedTodo.DateAdded
            };

            AppState.UpdateTodo(todo);
            await OnTodoUpdated.InvokeAsync();
            Close();
        }
        else if (response.StatusCode == HttpStatusCode.Conflict)
        {
            _updateConflict = true;
        }
        else
        {
            _updateFailed = true;
        }

    }

    private async Task DeleteTodoAsync()
    {
        var response = await TodosService.DeleteTodo(_loadedTodo.ListOfTodosId, _loadedTodo.Id);

        if (response.IsSuccessStatusCode)
        {
            _deleteFailed = false;
            AppState.DeleteTodo(_loadedTodo);
            await OnTodoUpdated.InvokeAsync();
            Close();
        }
        else
        {
            _deleteFailed = true;
        }

    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
